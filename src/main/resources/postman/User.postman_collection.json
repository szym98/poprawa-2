{
	"info": {
		"_postman_id": "e5556d22-ddd1-40e2-b5cf-f09f65984949",
		"name": "User",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35813982"
	},
	"item": [
		{
			"name": "wylistowanie podstawowych informacji o wszystkich użytkownikach zapisanych w systemie (tylko ID oraz nazwa klienta)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - Id, firstName, and lastName\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('Id');",
							"        pm.expect(user).to.have.property('firstName');",
							"        pm.expect(user).to.have.property('lastName');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.Id).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"First name and last name must be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
							"    pm.expect(user.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/v1/users/simple",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"users",
						"simple"
					]
				}
			},
			"response": []
		},
		{
			"name": "pobranie szczegółów dotyczących wybranego użytkownika (ID, imię, nazwisko, datę urodzenia, e-mail)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the response array structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.be.an('object');",
							"        pm.expect(user).to.have.property('Id').that.is.a('number');",
							"        pm.expect(user).to.have.property('firstName').that.is.a('string');",
							"        pm.expect(user).to.have.property('lastName').that.is.a('string');",
							"        pm.expect(user).to.have.property('birthdate').that.is.a('string');",
							"        pm.expect(user).to.have.property('email').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"First name and last name should be non-empty strings\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
							"    pm.expect(user.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Birthdate and email are in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/v1/users/3",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "utworzenie nowego użytkownika",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.id).to.exist;",
							"  pm.expect(responseData.firstName).to.exist;",
							"  pm.expect(responseData.lastName).to.exist;",
							"  pm.expect(responseData.birthdate).to.exist;",
							"  pm.expect(responseData.email).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.email).to.be.a('string');",
							"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"});",
							"",
							"",
							"pm.test(\"Birthdate is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"NewUserFirstName\",\r\n    \"lastName\": \"NewUserLastName\",\r\n    \"birthdate\": \"2000-11-12\",\r\n    \"email\": \"newexample@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/v1/users",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "usunięcie użytkownika",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/users/11",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"users",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "wyszukiwanie użytkowników po e-mailu, bez rozróżniania wielkości liter, wyszukujące po fragmencie nazwy (zwracane tylko ID oraz e-mail użytkowników)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - Id and email\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(item){",
							"        pm.expect(item).to.have.property('Id');",
							"        pm.expect(item).to.have.property('email');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/v1/users/email?email=t",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"users",
						"email"
					],
					"query": [
						{
							"key": "email",
							"value": "t"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "wyszukiwanie użytkowników po wieku starszym niż zdefiniowany",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate array elements for Id, firstName, lastName, birthdate, and email\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user).to.have.property('Id');",
							"        pm.expect(user).to.have.property('firstName');",
							"        pm.expect(user).to.have.property('lastName');",
							"        pm.expect(user).to.have.property('birthdate');",
							"        pm.expect(user).to.have.property('email');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Birthdate is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(user) {",
							"    pm.expect(user.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(user) {",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/users/older-than?age=45",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"users",
						"older-than"
					],
					"query": [
						{
							"key": "age",
							"value": "45"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "aktualizowanie użytkowników w systemie (dowolnie wybrany atrybut)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - Id, firstName, lastName, birthdate, and email\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('Id');",
							"    pm.expect(responseData).to.have.property('firstName');",
							"    pm.expect(responseData).to.have.property('lastName');",
							"    pm.expect(responseData).to.have.property('birthdate');",
							"    pm.expect(responseData).to.have.property('email');",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.email).to.match(/^.+@.+\\.com$/);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.Id).to.be.a('number');",
							"  pm.expect(responseData.Id).to.be.at.least(0, \"Id should be a non-negative integer\");",
							"});",
							"",
							"",
							"pm.test(\"Birthdate is in a valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"Id\": 3,\r\n        \"firstName\": \"Olivia\",\r\n        \"lastName\": \"Davis\",\r\n        \"birthdate\": \"1990-10-12\",\r\n        \"email\": \"Olivia.Davis@domain.com\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/users/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"users",
						"3"
					]
				}
			},
			"response": []
		}
	]
}