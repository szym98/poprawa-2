{
	"info": {
		"_postman_id": "8809144e-995d-490b-b721-337b7a5000c5",
		"name": "Training",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35813982"
	},
	"item": [
		{
			"name": "utworzenie nowego treningu",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"  pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"User object should exist and have required properties\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.user).to.exist;",
							"  pm.expect(responseData.user.id).to.exist;",
							"  pm.expect(responseData.user.firstName).to.exist;",
							"  pm.expect(responseData.user.lastName).to.exist;",
							"  pm.expect(responseData.user.birthdate).to.exist;",
							"  pm.expect(responseData.user.email).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Start time and end time are in valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.startTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Start time should be in valid date format\");",
							"    pm.expect(responseData.endTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"End time should be in valid date format\");",
							"});",
							"",
							"",
							"pm.test(\"Activity type is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.activityType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Distance and average speed are non-negative numbers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.distance).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.averageSpeed).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"1\",\r\n    \"startTime\": \"2024-05-05T12:00:00\",\r\n    \"endTime\": \"2024-05-05T12:45:00\",\r\n    \"activityType\": \"CYCLING\",\r\n    \"distance\": \"12.3\",\r\n    \"averageSpeed\": \"23.45\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/trainings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"trainings"
					]
				}
			},
			"response": []
		},
		{
			"name": "wyszukiwanie wszystkich treningów",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"User object structure is as expected\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(training) {",
							"        pm.expect(training.user).to.exist.and.to.be.an('object');",
							"        pm.expect(training.user.id).to.exist.and.to.be.a('number');",
							"        pm.expect(training.user.firstName).to.exist.and.to.be.a('string');",
							"        pm.expect(training.user.lastName).to.exist.and.to.be.a('string');",
							"        pm.expect(training.user.birthdate).to.exist.and.to.be.a('string');",
							"        pm.expect(training.user.email).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Start time and end time should be in valid date format\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.startTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    pm.expect(item.endTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"ActivityType should be a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(training) {",
							"    pm.expect(training.activityType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ActivityType should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Distance and averageSpeed are non-negative numbers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(training) {",
							"        pm.expect(training.distance).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(training.averageSpeed).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/v1/trainings",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"trainings"
					]
				}
			},
			"response": []
		},
		{
			"name": "wyszukiwanie treningów dla określonego Użytkownika",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Id field is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(training) {",
							"    pm.expect(training.id).to.be.a('number').and.to.satisfy((value) => value >= 0, \"Id should be a non-negative integer\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"User object has non-empty firstName, lastName, birthdate, and email fields\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  responseData.forEach(function(training) {",
							"    pm.expect(training.user).to.exist;",
							"    pm.expect(training.user.firstName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
							"    pm.expect(training.user.lastName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
							"    pm.expect(training.user.birthdate).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Birthdate should not be empty\");",
							"    pm.expect(training.user.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Start time and end time should be in valid date-time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.startTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"Start time should be in valid date-time format\");",
							"        pm.expect(item.endTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/, \"End time should be in valid date-time format\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/v1/trainings/user/3",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"trainings",
						"user",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "wyszukiwanie wszystkich treningów zakończonych (po konkretnej zdefiniowanej dacie)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"User object should exist and have the required properties\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(training) {",
							"        pm.expect(training.user).to.exist;",
							"        pm.expect(training.user).to.be.an('object');",
							"        pm.expect(training.user.id).to.exist.and.to.be.a('number');",
							"        pm.expect(training.user.firstName).to.exist.and.to.be.a('string');",
							"        pm.expect(training.user.lastName).to.exist.and.to.be.a('string');",
							"        pm.expect(training.user.birthdate).to.exist.and.to.be.a('string');",
							"        pm.expect(training.user.email).to.exist.and.to.be.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Start time and end time are in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(training) {",
							"        pm.expect(training.startTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"Start time should be in valid date format\");",
							"        pm.expect(training.endTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/, \"End time should be in valid date format\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Distance and average speed are non-negative numbers\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(training) {",
							"    pm.expect(training.distance).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(training.averageSpeed).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/v1/trainings/after/2024-01-19",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"trainings",
						"after",
						"2024-01-19"
					]
				}
			},
			"response": []
		},
		{
			"name": "wyszukiwanie wszystkich treningów dla konkretnej aktywności (np. wszystkie treningi biegowe)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"User object should exist and have specific properties\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"  responseData.forEach(function(activity) {",
							"    pm.expect(activity.user).to.exist;",
							"    pm.expect(activity.user).to.be.an('object');",
							"    pm.expect(activity.user.id).to.exist.and.to.be.a('number');",
							"    pm.expect(activity.user.firstName).to.exist.and.to.be.a('string');",
							"    pm.expect(activity.user.lastName).to.exist.and.to.be.a('string');",
							"    pm.expect(activity.user.birthdate).to.exist.and.to.be.a('string');",
							"    pm.expect(activity.user.email).to.exist.and.to.be.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Start time and end time are in valid date-time format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(activity) {",
							"        pm.expect(activity.startTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"        pm.expect(activity.endTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Distance and average speed should be non-negative numbers\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(activity) {",
							"    pm.expect(activity.distance).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(activity.averageSpeed).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/trainings/activity?activity=WALKING",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"trainings",
						"activity"
					],
					"query": [
						{
							"key": "activity",
							"value": "WALKING"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "aktualizacja treningu (dowolnie wybrane pole np. dystans)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Id field is present and non-negative\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.exist;",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Start time and end time are in valid date-time format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.startTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/);",
							"  pm.expect(responseData.endTime).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$/);",
							"});",
							"",
							"",
							"pm.test(\"Activity type must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.activityType).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Distance and averageSpeed should be non-negative numbers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    ",
							"    if (responseData.hasOwnProperty('distance')) {",
							"        pm.expect(responseData.distance).to.be.a('number').and.to.be.at.least(0);",
							"    } else {",
							"        pm.expect.fail(\"Distance property not found in the response\");",
							"    }",
							"",
							"    if (responseData.hasOwnProperty('averageSpeed')) {",
							"        pm.expect(responseData.averageSpeed).to.be.a('number').and.to.be.at.least(0);",
							"    } else {",
							"        pm.expect.fail(\"AverageSpeed property not found in the response\");",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"1\",\r\n    \"startTime\": \"2024-05-06T13:00:00\",\r\n    \"endTime\": \"2024-05-06T13:45:00\",\r\n    \"activityType\": \"CYCLING\",\r\n    \"distance\": \"23.4\",\r\n    \"averageSpeed\": \"34.55\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/trainings/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"trainings",
						"3"
					]
				}
			},
			"response": []
		}
	]
}