{
	"info": {
		"_postman_id": "e88fe8fc-d07a-428d-b5c3-6ca43bbcc990",
		"name": "Statistics",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35813982"
	},
	"item": [
		{
			"name": "utworzenie nowych statystyk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Id field should exist and be a number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.id).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"User object exists and is not empty\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.user).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.user).to.not.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Birthdate is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.user.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Total trainings, distance, and calories burned are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('totalTrainings').that.is.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData).to.have.property('totalDistance').that.is.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData).to.have.property('totalCaloriesBurned').that.is.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"1\",\r\n    \"totalTrainings\": \"3\",\r\n    \"totalDistance\": \"12.3\",\r\n    \"totalCaloriesBurned\": \"2345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/statistics",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"statistics"
					]
				}
			},
			"response": []
		},
		{
			"name": "aktualizacja Statystyk Użytkownika implementacja funkcjonalności do aktualizacji istniejących statystyk dla użytkownika",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Id is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Validate the user object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.user).to.exist.and.to.be.an('object');",
							"  pm.expect(responseData.user.id).to.exist.and.to.be.a('number');",
							"  pm.expect(responseData.user.firstName).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.user.lastName).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.user.birthdate).to.exist.and.to.be.a('string');",
							"  pm.expect(responseData.user.email).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Birthdate is in a valid date format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.user.birthdate).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Total trainings, distance, and calories burned are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.totalTrainings).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.totalDistance).to.be.a('number').and.to.be.at.least(0);",
							"    pm.expect(responseData.totalCaloriesBurned).to.be.a('number').and.to.be.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"1\",\r\n    \"totalTrainings\": \"5\",\r\n    \"totalDistance\": \"13.4\",\r\n    \"totalCaloriesBurned\": \"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/v1/statistics/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"statistics",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "pobranie szczegółów dotyczących statystyk dla danego użytkownika",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the user object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.user).to.exist.and.to.be.an('object');",
							"    pm.expect(item.user.id).to.exist.and.to.be.a('number');",
							"    pm.expect(item.user.firstName).to.exist.and.to.be.a('string');",
							"    pm.expect(item.user.lastName).to.exist.and.to.be.a('string');",
							"    pm.expect(item.user.birthdate).to.exist.and.to.be.a('string');",
							"    pm.expect(item.user.email).to.exist.and.to.be.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Total trainings, distance, and calories burned are non-negative integers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.totalTrainings).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(item.totalDistance).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(item.totalCaloriesBurned).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/statistics/user/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"statistics",
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "usunięcie statystyk",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/statistics/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"statistics",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "wyszukiwanie wszystkich statystyk gdzie ilość kalorii jest większa niż zdefiniowana",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('user');",
							"        pm.expect(item).to.have.property('totalTrainings');",
							"        pm.expect(item).to.have.property('totalDistance');",
							"        pm.expect(item).to.have.property('totalCaloriesBurned');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"User object and its fields are valid\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.user).to.be.an('object');",
							"    pm.expect(item.user.id).to.be.a('number');",
							"    pm.expect(item.user.firstName).to.be.a('string');",
							"    pm.expect(item.user.lastName).to.be.a('string');",
							"    pm.expect(item.user.birthdate).to.be.a('string');",
							"    pm.expect(item.user.email).to.be.a('string');",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"TotalTrainings is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.totalTrainings).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"TotalDistance and TotalCaloriesBurned are non-negative numbers\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.totalDistance).to.be.a('number').and.to.be.at.least(0);",
							"        pm.expect(item.totalCaloriesBurned).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/v1/statistics/calories-gt?calories=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"v1",
						"statistics",
						"calories-gt"
					],
					"query": [
						{
							"key": "calories",
							"value": "5"
						}
					]
				}
			},
			"response": []
		}
	]
}